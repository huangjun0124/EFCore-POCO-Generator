// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace NetCoreDbTest
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<HangFire_AggregatedCounter> HangFire_AggregatedCounters { get; set; } // AggregatedCounter
        public System.Data.Entity.DbSet<HangFire_Counter> HangFire_Counters { get; set; } // Counter
        public System.Data.Entity.DbSet<HangFire_Hash> HangFire_Hashes { get; set; } // Hash
        public System.Data.Entity.DbSet<HangFire_Job> HangFire_Jobs { get; set; } // Job
        public System.Data.Entity.DbSet<HangFire_JobParameter> HangFire_JobParameters { get; set; } // JobParameter
        public System.Data.Entity.DbSet<HangFire_JobQueue> HangFire_JobQueues { get; set; } // JobQueue
        public System.Data.Entity.DbSet<HangFire_List> HangFire_Lists { get; set; } // List
        public System.Data.Entity.DbSet<HangFire_Schema> HangFire_Schemata { get; set; } // Schema
        public System.Data.Entity.DbSet<HangFire_Server> HangFire_Servers { get; set; } // Server
        public System.Data.Entity.DbSet<HangFire_Set> HangFire_Sets { get; set; } // Set
        public System.Data.Entity.DbSet<HangFire_State> HangFire_States { get; set; } // State
        public System.Data.Entity.DbSet<JobParamView> JobParamViews { get; set; } // JobParamView
        public System.Data.Entity.DbSet<MyTable> MyTables { get; set; } // MyTable
        public System.Data.Entity.DbSet<View2> View2 { get; set; } // View2

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new HangFire_AggregatedCounterConfiguration());
            modelBuilder.Configurations.Add(new HangFire_CounterConfiguration());
            modelBuilder.Configurations.Add(new HangFire_HashConfiguration());
            modelBuilder.Configurations.Add(new HangFire_JobConfiguration());
            modelBuilder.Configurations.Add(new HangFire_JobParameterConfiguration());
            modelBuilder.Configurations.Add(new HangFire_JobQueueConfiguration());
            modelBuilder.Configurations.Add(new HangFire_ListConfiguration());
            modelBuilder.Configurations.Add(new HangFire_SchemaConfiguration());
            modelBuilder.Configurations.Add(new HangFire_ServerConfiguration());
            modelBuilder.Configurations.Add(new HangFire_SetConfiguration());
            modelBuilder.Configurations.Add(new HangFire_StateConfiguration());
            modelBuilder.Configurations.Add(new JobParamViewConfiguration());
            modelBuilder.Configurations.Add(new MyTableConfiguration());
            modelBuilder.Configurations.Add(new View2Configuration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new HangFire_AggregatedCounterConfiguration(schema));
            modelBuilder.Configurations.Add(new HangFire_CounterConfiguration(schema));
            modelBuilder.Configurations.Add(new HangFire_HashConfiguration(schema));
            modelBuilder.Configurations.Add(new HangFire_JobConfiguration(schema));
            modelBuilder.Configurations.Add(new HangFire_JobParameterConfiguration(schema));
            modelBuilder.Configurations.Add(new HangFire_JobQueueConfiguration(schema));
            modelBuilder.Configurations.Add(new HangFire_ListConfiguration(schema));
            modelBuilder.Configurations.Add(new HangFire_SchemaConfiguration(schema));
            modelBuilder.Configurations.Add(new HangFire_ServerConfiguration(schema));
            modelBuilder.Configurations.Add(new HangFire_SetConfiguration(schema));
            modelBuilder.Configurations.Add(new HangFire_StateConfiguration(schema));
            modelBuilder.Configurations.Add(new JobParamViewConfiguration(schema));
            modelBuilder.Configurations.Add(new MyTableConfiguration(schema));
            modelBuilder.Configurations.Add(new View2Configuration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public System.Collections.Generic.List<MyOwnProcReturnModel> MyOwnProc(int? param1, string param2, out string nvarParam, decimal? dec)
        {
            int procResult;
            return MyOwnProc(param1, param2, out nvarParam, dec, out procResult);
        }

        public System.Collections.Generic.List<MyOwnProcReturnModel> MyOwnProc(int? param1, string param2, out string nvarParam, decimal? dec, out int procResult)
        {
            var param1Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@Param1", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = param1.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!param1.HasValue)
                param1Param.Value = System.DBNull.Value;

            var param2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@Param2", SqlDbType = System.Data.SqlDbType.Char, Direction = System.Data.ParameterDirection.Input, Value = param2, Size = 12 };
            if (param2Param.Value == null)
                param2Param.Value = System.DBNull.Value;

            var nvarParamParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@nvarParam", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Output, Size = 100 };
            var decParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@dec", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = dec.GetValueOrDefault(), Precision = 18, Scale = 4 };
            if (!dec.HasValue)
                decParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<MyOwnProcReturnModel>("EXEC @procResult = [dbo].[MyOwnProc] @Param1, @Param2, @nvarParam OUTPUT, @dec", param1Param, param2Param, nvarParamParam, decParam, procResultParam).ToList();
            if (IsSqlParameterNull(nvarParamParam))
                nvarParam = default(string);
            else
                nvarParam = (string) nvarParamParam.Value;

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

    }
}
// </auto-generated>
